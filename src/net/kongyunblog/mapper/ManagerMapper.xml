<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper     
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"     
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">     
   
<mapper namespace="net.kongyunblog.dao.ManagerDao">
	
	<resultMap type="Manager" id="manager_orm">
		<id property="id" column="manager_id"/>
		<result property="name" column="manager_name"/>
		<result property="password" column="manager_password"/>
		<result property="email" column="manager_email"/>
		<result property="status" column="manager_status"/>
		<association property="role" javaType="Role">
			<id property="id" column="role_id"/>
			<result property="name" column="role_name"/>
			<result property="role" column="role_role"/>
		</association>
	</resultMap>

	<select id="selectManagerByID" parameterType="Long" resultMap="manager_orm">
		select 
			m.id      	as 	manager_id,
			m.name 		as 	manager_name,
			m.password 	as	manager_password,
			m.email		as 	manager_email,
			m.status	as  manager_status,
			r.id 		as 	role_id,
			r.name 		as  role_name,
			r.role 		as  role_role
			from manager m
			left outer join role  r on m.role_id = r.id
			where m.id=#{id}
	</select>
	
	<insert id="insertManager" parameterType="Manager" > 
		insert into manager(name,password,email,role_id)
		values(#{name},#{password},#{email},#{role.id}) 
	</insert>
	
	<delete id="deleteManager" parameterType="Long">
		delete from manager where id=#{id}
	</delete>

  	<update id="updateManager" parameterType="Manager">
  		update manager 
			set name=#{name},password=#{password},email=#{email},status=#{status},role_id=#{role.id}
			where id=#{id}
  	</update>
  	
  	<update id="updateManagerPassword" parameterType="Manager">
  		update manager 
			set password=#{password}
			where id=#{id}
  	</update>
  	
  	<select id="selectManagerByPage" parameterType="map" resultMap="manager_orm">
  		select 
			m.id      	as 	manager_id,
			m.name 		as 	manager_name,
			m.password 	as	manager_password,
			m.email		as 	manager_email,
			m.status	as  manager_status,
			r.id 		as 	role_id,
			r.name 		as  role_name,
			r.role 		as  role_role
			from manager m
			left outer join role  r on m.role_id = r.id 
			limit #{index},#{size}
  	</select>
  	
  	<select id="getCount" resultType="int">
  		select count(*) from manager
  	</select>
  	
  	<select id="selectByName" parameterType="String" resultMap="manager_orm">
  		select 
			m.id      	as 	manager_id,
			m.name 		as 	manager_name,
			m.password 	as	manager_password,
			m.email		as 	manager_email,
			m.status	as  manager_status,
			r.id 		as 	role_id,
			r.name 		as  role_name,
			r.role 		as  role_role
			from manager m
			left outer join role  r on m.role_id = r.id 
			where m.name=#{name}
  	</select>
  	
  	<select id="selectByEmail" parameterType="String" resultMap="manager_orm">
  		select 
			m.id      	as 	manager_id,
			m.name 		as 	manager_name,
			m.password 	as	manager_password,
			m.email		as 	manager_email,
			m.status	as  manager_status,
			r.id 		as 	role_id,
			r.name 		as  role_name,
			r.role 		as  role_role
			from manager m
			left outer join role  r on m.role_id = r.id 
			where m.email=#{email}
  	</select>
  	
</mapper>  
